{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":861496,"sourceType":"datasetVersion","datasetId":457093}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# import system libs\nimport os\nimport pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-07-15T10:56:31.519600Z","iopub.execute_input":"2024-07-15T10:56:31.520040Z","iopub.status.idle":"2024-07-15T10:56:31.525294Z","shell.execute_reply.started":"2024-07-15T10:56:31.520003Z","shell.execute_reply":"2024-07-15T10:56:31.523988Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\npath_train = r\"/kaggle/input/alzheimers-dataset-4-class-of-images/Alzheimer_s Dataset/train\"\npath_test = r\"/kaggle/input/alzheimers-dataset-4-class-of-images/Alzheimer_s Dataset/test\"\nbatch_s = 32\nimg_size= (224,224)\nmode = \"rgb\"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-15T11:02:31.687209Z","iopub.execute_input":"2024-07-15T11:02:31.687665Z","iopub.status.idle":"2024-07-15T11:02:31.693944Z","shell.execute_reply.started":"2024-07-15T11:02:31.687626Z","shell.execute_reply":"2024-07-15T11:02:31.692501Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"def df_constructor(path):\n    file_paths = []\n    labels = []\n\n    folds = os.listdir(path)\n    for fold in folds:\n        fold_path = os.path.join(path,fold)\n        file_list = os.listdir(fold_path)\n        for file in file_list:\n            file_path = os.path.join(fold_path,file)\n            file_paths.append(file_path)\n            labels.append(fold)\n\n\n    file_series = pd.Series(file_paths,name=\"file_paths\")\n    label_series = pd.Series(labels,name=\"labels\")\n\n    df = pd.concat([file_series,label_series],axis=1)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-07-15T10:56:34.915841Z","iopub.execute_input":"2024-07-15T10:56:34.916279Z","iopub.status.idle":"2024-07-15T10:56:34.924960Z","shell.execute_reply.started":"2024-07-15T10:56:34.916244Z","shell.execute_reply":"2024-07-15T10:56:34.923410Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"train = df_constructor(path_train)\ntest = df_constructor(path_test)\nall_data = pd.concat([train,test])","metadata":{"execution":{"iopub.status.busy":"2024-07-15T11:02:34.902945Z","iopub.execute_input":"2024-07-15T11:02:34.903383Z","iopub.status.idle":"2024-07-15T11:02:35.938969Z","shell.execute_reply.started":"2024-07-15T11:02:34.903346Z","shell.execute_reply":"2024-07-15T11:02:35.937464Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"train #5121 rows × 2 columns  --> file_paths\tlabels","metadata":{"execution":{"iopub.status.busy":"2024-07-15T11:04:23.690716Z","iopub.execute_input":"2024-07-15T11:04:23.691176Z","iopub.status.idle":"2024-07-15T11:04:23.718512Z","shell.execute_reply.started":"2024-07-15T11:04:23.691129Z","shell.execute_reply":"2024-07-15T11:04:23.717100Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"                                             file_paths            labels\n0     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n1     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n2     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n3     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n4     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n...                                                 ...               ...\n5116  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n5117  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n5118  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n5119  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n5120  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n\n[5121 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>file_paths</th>\n      <th>labels</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5116</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>5117</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>5118</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>5119</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>5120</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n  </tbody>\n</table>\n<p>5121 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test #1279 rows × 2 columns","metadata":{"execution":{"iopub.status.busy":"2024-07-15T11:04:59.575432Z","iopub.execute_input":"2024-07-15T11:04:59.575858Z","iopub.status.idle":"2024-07-15T11:04:59.589396Z","shell.execute_reply.started":"2024-07-15T11:04:59.575823Z","shell.execute_reply":"2024-07-15T11:04:59.587992Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"                                             file_paths            labels\n0     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n1     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n2     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n3     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n4     /kaggle/input/alzheimers-dataset-4-class-of-im...  ModerateDemented\n...                                                 ...               ...\n1274  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n1275  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n1276  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n1277  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n1278  /kaggle/input/alzheimers-dataset-4-class-of-im...      MildDemented\n\n[1279 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>file_paths</th>\n      <th>labels</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>ModerateDemented</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1274</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>1275</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>1276</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>1277</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n    <tr>\n      <th>1278</th>\n      <td>/kaggle/input/alzheimers-dataset-4-class-of-im...</td>\n      <td>MildDemented</td>\n    </tr>\n  </tbody>\n</table>\n<p>1279 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"num_rows, num_cols = all_data.shape\nprint(f\"Number of rows: {num_rows}\")\nprint(f\"Number of columns: {num_cols}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-15T11:07:59.357421Z","iopub.execute_input":"2024-07-15T11:07:59.357878Z","iopub.status.idle":"2024-07-15T11:07:59.365697Z","shell.execute_reply.started":"2024-07-15T11:07:59.357842Z","shell.execute_reply":"2024-07-15T11:07:59.364207Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Number of rows: 6400\nNumber of columns: 2\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nnum_train = train.labels.value_counts().reset_index()\nnum_train.columns = ['labels', 'count']\n\nax = sns.barplot(data=num_train, x=\"labels\", y=\"count\")\n\n# Add the exact number of labels on top of each bar\nfor p in ax.patches:\n    ax.annotate(format(p.get_height(), '.0f'), \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha = 'center', va = 'center', \n                xytext = (0, 9), \n                textcoords = 'offset points')\n\nplt.title(\"# images of each class - Train\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-15T11:21:25.883865Z","iopub.execute_input":"2024-07-15T11:21:25.884369Z","iopub.status.idle":"2024-07-15T11:21:26.128697Z","shell.execute_reply.started":"2024-07-15T11:21:25.884332Z","shell.execute_reply":"2024-07-15T11:21:26.127519Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"print('num_train:\\n',num_train)\ntest_count = test.labels.value_counts().reset_index()\nprint('num_test:\\n',test_count)\nall_count = all_data.labels.value_counts().reset_index()\nprint('num_all:\\n',all_count)","metadata":{"execution":{"iopub.status.busy":"2024-07-15T11:20:55.278391Z","iopub.execute_input":"2024-07-15T11:20:55.278884Z","iopub.status.idle":"2024-07-15T11:20:55.296432Z","shell.execute_reply.started":"2024-07-15T11:20:55.278844Z","shell.execute_reply":"2024-07-15T11:20:55.294994Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"num_train:\n              labels  count\n0       NonDemented   2560\n1  VeryMildDemented   1792\n2      MildDemented    717\n3  ModerateDemented     52\nnum_test:\n              labels  count\n0       NonDemented    640\n1  VeryMildDemented    448\n2      MildDemented    179\n3  ModerateDemented     12\nnum_all:\n              labels  count\n0       NonDemented   3200\n1  VeryMildDemented   2240\n2      MildDemented    896\n3  ModerateDemented     64\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}